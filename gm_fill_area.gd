tool
extends GM_Path

# --
# GM Fill Area
# --
# Defines a region to be randomly filled with other scenes. Useful to
# place rocks, trees and other little props that would be tedious to place
# by hand.
# This node only defines the shape of the area with a 3D path and generic
# parameters such a the total item count. You still need to add a child 
# GM_AreaItem node to define the actual scene to be placed and specific
# parameters. You can add multiple GM_AreaItem to a single GM_FillArea node.
# --
#
# --

class_name GM_FillArea

## --
## Imported libraries
## --

# TODO : Implement these, but check if this approach couldn't be replaced by a better one first
var UniformDistribution = load("res://addons/gm_fill_area/distributions/uniform.gd")
var NormalDistribution = load("res://addons/gm_fill_area/distributions/normal.gd")
var SimplexNoiseDistribution = load("res://addons/gm_fill_area/distributions/simplex_noise.gd")


## -- 
## Exported variables
## --
export(int) var amount : int = 10 setget _set_amount
export(int, "Uniform", "Normal", "Simplex noise") var distribution : int = 0 setget _set_distribution
export(int) var custom_seed : int = 0 setget _set_seed
export(Vector3) var rotation_randomness : Vector3 = Vector3(0.0, 1.0, 0.0)
export(float) var scale_randomness : float = 1.0 setget _set_scale
export(float) var global_scale : float = 1.0

## --
## Internal variables
## --
var _items : Array
var _items_root : Spatial
var _total_proportion : int
var _distribution : Distribution

## --
## Public methods
## --

# Called from any children when their exported parameters changes
func update():
	if not _is_ready():
		return
	_setup_items_root()
	_clear_items()
	_discover_items_info()
	_setup_distribution()
	_fill_area()

## --
## Internal methods
## --

func _ready():
	update()

func _setup_items_root():
	_items_root = get_node("ItemsRoot")
	if not _items_root:
		_items_root = Spatial.new()
		_items_root.set_name("ItemsRoot")
		add_child(_items_root)
		_items_root.set_owner(get_tree().get_edited_scene_root())

# Loop through children to find all GM_ItemArea nodes within
func _discover_items_info():
	_items.clear()
	_total_proportion = 0
	
	for c in get_children():
		if c.get_class() == "GM_ItemArea":
			_items.append(c)
			_total_proportion += c.proportion

func _setup_distribution():
	match distribution:
		0:
			_distribution = UniformDistribution.new()
		1:
			_distribution = NormalDistribution.new()
		2:
			_distribution = SimplexNoiseDistribution.new()
	_distribution.init(custom_seed)

# Remove all items generated by this script
func _clear_items():
	if _items_root:
		for c in _items_root.get_children():
			c.queue_free()

func _fill_area():
	var count
	for i in _items:
		count = int(float(i.proportion) / _total_proportion * amount)
		_fill_area_with(i, count)

func _fill_area_with(item, amount):
	var placed_items = 0
	while placed_items < amount:
		var coords = _distribution.get_vector3() * size * 0.5 + center
		if is_point_inside(coords):
			_place_item(item, coords)
		placed_items += 1
		
func _place_item(item, coords):
	if not _items_root:
		_setup_items_root()
		
	# Create item and add it to the scene
	var instance = load(item.item_path).instance()
	_items_root.add_child(instance)
	instance.set_owner(_items_root)
	
	# Update item location
	var pos_y = _get_ground_position(coords)
	instance.translation = Vector3(coords.x, pos_y, coords.z)
	
	# Update item rotation
	var rotation = _distribution.get_vector3() * rotation_randomness
	instance.rotation = rotation
	
	# Update item scaling
	var s = 1 + abs(_distribution.get_float()) * scale_randomness
	instance.scale = Vector3(s, s, s) * global_scale
	
func _get_ground_position(coords):
	# TODO : Perform a raycast along the projection axis and place item
	# on the closest surface found
	return 0.0

func _set_amount(val):
	amount = val
	update()

func _set_distribution(val):
	distribution = val
	update()

func _set_seed(val):
	custom_seed = val
	update()

func _set_scale(val):
	scale_randomness = val
	update()

# Avoid certain errors during tool developpement
func _is_ready():
	set_process(true)
	return get_tree()

func _process(_delta):
	pass
