tool
extends ScatterBase

# --
# Scatter Duplicates
# --
# Creates full duplicates of a scene and place them randomly inside a path.
# This node only defines the shape and some parameters like total item count.
# You need to add a child ScatterItem node to define the actual scene that will
# be duplicated. You can add multiple ScatterItems to a single ScatterDuplicate
# node.
# Do NOT use this node to place thousands of simple items like grass for example,
# use a ScatterMultimesh instead.
# --
#
# --

class_name ScatterDuplicates

## --
## Internal variables
## --
var _items_root : Spatial

## --
## Public methods
## --

func update():
	if not _is_ready():
		return
	_setup_items_root()
	_clear_items()
	_discover_items_info()
	_setup_distribution()
	_fill_area()

## --
## Internal methods
## --

func _setup_items_root():
	_items_root = get_node("Duplicates")
	if not _items_root:
		_items_root = Spatial.new()
		_items_root.set_name("Duplicates")
		add_child(_items_root)
		_items_root.set_owner(get_tree().get_edited_scene_root())

# Remove all items generated by this script
func _clear_items():
	if _items_root:
		for c in _items_root.get_children():
			c.queue_free()

func _fill_area():
	var count
	for i in _items:
		count = int(float(i.proportion) / _total_proportion * amount)
		_fill_area_with(i, count)

func _fill_area_with(item, amount):
	var placed_items = 0
	while placed_items < amount:
		var coords = _distribution.get_vector3() * size * 0.5 + center
		if is_point_inside(coords):
			_place_item(item, coords)
		placed_items += 1
		
func _place_item(item, coords):
	if not _items_root:
		_setup_items_root()
		
	# Create item and add it to the scene
	var instance = load(item.item_path).instance()
	_items_root.add_child(instance)
	instance.set_owner(get_tree().get_edited_scene_root())
	
	# Update item location
	var pos_y = _get_ground_position(coords)
	instance.translation = Vector3(coords.x, pos_y, coords.z)
	
	# Update item rotation
	var rotation = _distribution.get_vector3() * rotation_randomness
	instance.rotation = rotation
	
	# Update item scaling
	var s = Vector3.ONE + abs(_distribution.get_float()) * scale_randomness
	instance.scale = s * global_scale
