tool
extends ScatterBase

# --
# Scatter Duplicates
# --
# Creates full duplicates of a scene and place them randomly inside a path.
# This node only defines the shape and some parameters like total item count.
# You need to add a child ScatterItem node to define the actual scene that will
# be duplicated. You can add multiple ScatterItems to a single ScatterDuplicate
# node.
# Do NOT use this node to place thousands of simple items like grass for example,
# use a ScatterMultimesh instead.
# --
#
# --

class_name ScatterDuplicates

## --
## Internal variables
## --

## --
## Public methods
## --

func update():
	if not _is_ready():
		return
	_discover_items_info()
	_setup_distribution()
	_fill_area()

## --
## Internal methods
## --

func _get_or_create_items_root(item):
	var root = item.get_node("Duplicates")
	if not root:
		root = Spatial.new()
		root.set_name("Duplicates")
		item.add_child(root)
		root.set_owner(get_tree().get_edited_scene_root())
	root.translation = Vector3.ZERO
	return root

# Remove all items generated by this script
func _clear_items(item):
	var root = item.get_node("Duplicates")
	if root:
		for c in root.get_children():
			c.queue_free()

func _fill_area():
	var count
	for i in _items:
		count = int(float(i.proportion) / _total_proportion * amount)
		_fill_area_with(i, count)

func _fill_area_with(item, amount):
	item.translation = Vector3.ZERO
	var root = _get_or_create_items_root(item)
	var instances = root.get_children()
	var child_count = instances.size()
	for i in range(0, amount):
		var pos = _get_next_valid_pos(item.get_exclusion_areas())
		var instance
		if i < child_count:
			instance = instances[i]
		else:
			instance = _create_instance(item, root)
		_place_item(item, instance, pos)
	if amount < child_count:
		for i in range(amount, child_count):
			instances[i].queue_free()

func _create_instance(item, root):
	# Create item and add it to the scene
	var instance = load(item.item_path).instance()
	root.add_child(instance)
	instance.set_owner(get_tree().get_edited_scene_root())
	return instance
	
func _place_item(item, instance, pos):
	# Update item location
	var pos_y = _get_ground_position(pos)
	instance.translation = Vector3(pos.x, pos_y, pos.z)
	if not item.ignore_initial_position:
		instance.translation += item.initial_position
	
	# Update item rotation
	var rotation = _distribution.get_vector3() * rotation_randomness
	if item.ignore_initial_rotation:
		instance.rotation = rotation
	else:
		instance.rotation = item.initial_rotation + rotation
	
	# Update item scaling
	var s = Vector3.ONE + abs(_distribution.get_float()) * scale_randomness
	if item.ignore_initial_scale:
		instance.scale = s * global_scale * item.scale_modifier
	else:
		instance.scale = s * global_scale * item.scale_modifier * item.initial_scale

